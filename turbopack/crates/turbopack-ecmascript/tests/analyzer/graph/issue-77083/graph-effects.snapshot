[
    Conditional {
        condition: Unknown {
            original_value: None,
            reason: "labeled statement",
            has_side_effects: true,
        },
        kind: Labeled {
            body: EffectsBlock {
                effects: [],
                range: StartAfter(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                1,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            Labeled,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Labeled,
            ),
        ],
        span: 91..192,
        in_try: false,
    },
    ImportedBinding {
        esm_reference_index: 1,
        export: Some(
            "assert",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 201..207,
        in_try: false,
    },
    Call {
        func: Member(
            3,
            Module(
                ModuleValue {
                    module: "./assert",
                    annotations: ImportAnnotations {
                        map: {},
                    },
                },
            ),
            Constant(
                Str(
                    Atom(
                        "assert",
                    ),
                ),
            ),
        ),
        args: [
            Value(
                Constant(
                    Num(
                        ConstantNumber(
                            2.0,
                        ),
                    ),
                ),
            ),
            Value(
                Constant(
                    Num(
                        ConstantNumber(
                            2.0,
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
        ],
        span: 201..213,
        in_try: false,
        new: false,
    },
    ImportedBinding {
        esm_reference_index: 1,
        export: Some(
            "assert",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 222..228,
        in_try: false,
    },
    Call {
        func: Member(
            3,
            Module(
                ModuleValue {
                    module: "./assert",
                    annotations: ImportAnnotations {
                        map: {},
                    },
                },
            ),
            Constant(
                Str(
                    Atom(
                        "assert",
                    ),
                ),
            ),
        ),
        args: [
            Value(
                Constant(
                    Num(
                        ConstantNumber(
                            3.0,
                        ),
                    ),
                ),
            ),
            Value(
                Constant(
                    Num(
                        ConstantNumber(
                            3.0,
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
        ],
        span: 222..234,
        in_try: false,
        new: false,
    },
    Unreachable {
        start_ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    3,
                ),
            ),
            Stmt(
                Return,
            ),
        ],
    },
]
