[
    Conditional {
        condition: Constant(
            True,
        ),
        kind: Ternary {
            then: EffectsBlock {
                effects: [],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                0,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Var,
                        ),
                        VarDecl(
                            Decls(
                                0,
                            ),
                        ),
                        VarDeclarator(
                            Init,
                        ),
                        Expr(
                            Call,
                        ),
                        CallExpr(
                            Args(
                                0,
                            ),
                        ),
                        ExprOrSpread(
                            Expr,
                        ),
                        Expr(
                            Cond,
                        ),
                        CondExpr(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                0,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Var,
                        ),
                        VarDecl(
                            Decls(
                                0,
                            ),
                        ),
                        VarDeclarator(
                            Init,
                        ),
                        Expr(
                            Call,
                        ),
                        CallExpr(
                            Args(
                                0,
                            ),
                        ),
                        ExprOrSpread(
                            Expr,
                        ),
                        Expr(
                            Cond,
                        ),
                        CondExpr(
                            Alt,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    0,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Cond,
            ),
            CondExpr(
                Test,
            ),
        ],
        span: 18..34,
        in_try: false,
    },
    Call {
        func: FreeVar(
            "import",
        ),
        args: [
            Value(
                Constant(
                    Str(
                        Word(
                            "a",
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
        ],
        span: 11..35,
        in_try: false,
        new: false,
    },
    Member {
        obj: Member(
            3,
            FreeVar(
                "process",
            ),
            Constant(
                Str(
                    Atom(
                        "env",
                    ),
                ),
            ),
        ),
        prop: Constant(
            Str(
                Atom(
                    "NEXT_RUNTIME",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    0,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Cond,
            ),
            CondExpr(
                Test,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Left,
            ),
            Expr(
                Member,
            ),
        ],
        span: 57..81,
        in_try: false,
    },
    Member {
        obj: FreeVar(
            "process",
        ),
        prop: Constant(
            Str(
                Atom(
                    "env",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    0,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Cond,
            ),
            CondExpr(
                Test,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Left,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Member,
            ),
        ],
        span: 57..68,
        in_try: false,
    },
    FreeVar {
        var: FreeVar(
            "process",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    0,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Cond,
            ),
            CondExpr(
                Test,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Left,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 57..64,
        in_try: false,
    },
    Conditional {
        condition: Binary(
            7,
            Member(
                5,
                Member(
                    3,
                    FreeVar(
                        "process",
                    ),
                    Constant(
                        Str(
                            Atom(
                                "env",
                            ),
                        ),
                    ),
                ),
                Constant(
                    Str(
                        Atom(
                            "NEXT_RUNTIME",
                        ),
                    ),
                ),
            ),
            StrictEqual,
            Constant(
                Str(
                    Word(
                        "edge",
                    ),
                ),
            ),
        ),
        kind: Ternary {
            then: EffectsBlock {
                effects: [],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                1,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Var,
                        ),
                        VarDecl(
                            Decls(
                                0,
                            ),
                        ),
                        VarDeclarator(
                            Init,
                        ),
                        Expr(
                            Call,
                        ),
                        CallExpr(
                            Args(
                                0,
                            ),
                        ),
                        ExprOrSpread(
                            Expr,
                        ),
                        Expr(
                            Cond,
                        ),
                        CondExpr(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                1,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Var,
                        ),
                        VarDecl(
                            Decls(
                                0,
                            ),
                        ),
                        VarDeclarator(
                            Init,
                        ),
                        Expr(
                            Call,
                        ),
                        CallExpr(
                            Args(
                                0,
                            ),
                        ),
                        ExprOrSpread(
                            Expr,
                        ),
                        Expr(
                            Cond,
                        ),
                        CondExpr(
                            Alt,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    0,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Cond,
            ),
            CondExpr(
                Test,
            ),
        ],
        span: 57..196,
        in_try: false,
    },
    Call {
        func: FreeVar(
            "import",
        ),
        args: [
            Value(
                Tenary(
                    10,
                    Binary(
                        7,
                        Member(
                            5,
                            Member(
                                3,
                                FreeVar(
                                    "process",
                                ),
                                Constant(
                                    Str(
                                        Atom(
                                            "env",
                                        ),
                                    ),
                                ),
                            ),
                            Constant(
                                Str(
                                    Atom(
                                        "NEXT_RUNTIME",
                                    ),
                                ),
                            ),
                        ),
                        StrictEqual,
                        Constant(
                            Str(
                                Word(
                                    "edge",
                                ),
                            ),
                        ),
                    ),
                    Constant(
                        Str(
                            Word(
                                "next/dist/compiled/@vercel/og/index.edge.js",
                            ),
                        ),
                    ),
                    Constant(
                        Str(
                            Word(
                                "next/dist/compiled/@vercel/og/index.node.js",
                            ),
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
        ],
        span: 47..198,
        in_try: false,
        new: false,
    },
    Conditional {
        condition: Constant(
            True,
        ),
        kind: IfElse {
            then: EffectsBlock {
                effects: [
                    Call {
                        func: FreeVar(
                            "import",
                        ),
                        args: [
                            Value(
                                Constant(
                                    Str(
                                        Word(
                                            "a",
                                        ),
                                    ),
                                ),
                            ),
                        ],
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    3,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Assign,
                            ),
                            AssignExpr(
                                Right,
                            ),
                            Expr(
                                Call,
                            ),
                        ],
                        span: 226..237,
                        in_try: false,
                        new: false,
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                3,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            If,
                        ),
                        IfStmt(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [
                    Call {
                        func: FreeVar(
                            "import",
                        ),
                        args: [
                            Value(
                                Constant(
                                    Str(
                                        Word(
                                            "b",
                                        ),
                                    ),
                                ),
                            ),
                        ],
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    3,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Alt,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Assign,
                            ),
                            AssignExpr(
                                Right,
                            ),
                            Expr(
                                Call,
                            ),
                        ],
                        span: 254..265,
                        in_try: false,
                        new: false,
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                3,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            If,
                        ),
                        IfStmt(
                            Alt,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    3,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
        ],
        span: 208..268,
        in_try: false,
    },
    Conditional {
        condition: Constant(
            True,
        ),
        kind: IfElse {
            then: EffectsBlock {
                effects: [
                    ImportedBinding {
                        esm_reference_index: 1,
                        export: Some(
                            "x",
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    7,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: 354..355,
                        in_try: false,
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                7,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            If,
                        ),
                        IfStmt(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [
                    ImportedBinding {
                        esm_reference_index: 3,
                        export: Some(
                            "y",
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    7,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Alt,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: 368..369,
                        in_try: false,
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                7,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            If,
                        ),
                        IfStmt(
                            Alt,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    7,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
        ],
        span: 340..372,
        in_try: false,
    },
    Conditional {
        condition: Constant(
            True,
        ),
        kind: IfElse {
            then: EffectsBlock {
                effects: [
                    Unreachable {
                        start_ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    8,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                Decl,
                            ),
                            Decl(
                                Fn,
                            ),
                            FnDecl(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Return,
                            ),
                        ],
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                8,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            If,
                        ),
                        IfStmt(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [],
                range: StartAfter(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                8,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            If,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    8,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
        ],
        span: 399..434,
        in_try: false,
    },
    Call {
        func: FreeVar(
            "import",
        ),
        args: [
            Value(
                Constant(
                    Str(
                        Word(
                            "c",
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    8,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
        ],
        span: 438..449,
        in_try: false,
        new: false,
    },
    ImportedBinding {
        esm_reference_index: 4,
        export: Some(
            "z",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    8,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 453..454,
        in_try: false,
    },
]
