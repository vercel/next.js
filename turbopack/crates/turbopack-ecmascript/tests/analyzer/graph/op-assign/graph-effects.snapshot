[
    Member {
        obj: FreeVar(
            "performance",
        ),
        prop: Constant(
            Str(
                Atom(
                    "now",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Member,
            ),
        ],
        span: 212..227,
        in_try: false,
    },
    FreeVar {
        var: FreeVar(
            "performance",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 212..223,
        in_try: false,
    },
    MemberCall {
        obj: FreeVar(
            "performance",
        ),
        prop: Constant(
            Str(
                Atom(
                    "now",
                ),
            ),
        ),
        args: [],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
        ],
        span: 212..229,
        in_try: false,
        new: false,
    },
    Member {
        obj: Member(
            3,
            Variable(
                (
                    "ComponentMod",
                    #3,
                ),
            ),
            Constant(
                Str(
                    Atom(
                        "__next_app__",
                    ),
                ),
            ),
        ),
        prop: Constant(
            Str(
                Atom(
                    "loadChunk",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Member,
            ),
        ],
        span: 257..292,
        in_try: true,
    },
    Member {
        obj: Variable(
            (
                "ComponentMod",
                #3,
            ),
        ),
        prop: Constant(
            Str(
                Atom(
                    "__next_app__",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Member,
            ),
        ],
        span: 257..282,
        in_try: true,
    },
    MemberCall {
        obj: Member(
            3,
            Variable(
                (
                    "ComponentMod",
                    #3,
                ),
            ),
            Constant(
                Str(
                    Atom(
                        "__next_app__",
                    ),
                ),
            ),
        ),
        prop: Constant(
            Str(
                Atom(
                    "loadChunk",
                ),
            ),
        ),
        args: [
            Spread,
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Call,
            ),
        ],
        span: 257..301,
        in_try: true,
        new: false,
    },
    Unreachable {
        start_ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
        ],
    },
    Member {
        obj: FreeVar(
            "performance",
        ),
        prop: Constant(
            Str(
                Atom(
                    "now",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Finalizer,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Assign,
            ),
            AssignExpr(
                Right,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Left,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Member,
            ),
        ],
        span: 356..371,
        in_try: false,
    },
    FreeVar {
        var: FreeVar(
            "performance",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Finalizer,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Assign,
            ),
            AssignExpr(
                Right,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Left,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 356..367,
        in_try: false,
    },
    MemberCall {
        obj: FreeVar(
            "performance",
        ),
        prop: Constant(
            Str(
                Atom(
                    "now",
                ),
            ),
        ),
        args: [],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
            ReturnStmt(
                Arg,
            ),
            Expr(
                Object,
            ),
            ObjectLit(
                Props(
                    0,
                ),
            ),
            PropOrSpread(
                Prop,
            ),
            Prop(
                KeyValue,
            ),
            KeyValueProp(
                Value,
            ),
            Expr(
                Arrow,
            ),
            ArrowExpr(
                Body,
            ),
            BlockStmtOrExpr(
                BlockStmt,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Try,
            ),
            TryStmt(
                Finalizer,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Assign,
            ),
            AssignExpr(
                Right,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Left,
            ),
            Expr(
                Call,
            ),
        ],
        span: 356..373,
        in_try: false,
        new: false,
    },
    Unreachable {
        start_ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Return,
            ),
        ],
    },
    Conditional {
        condition: Binary(
            3,
            Variable(
                (
                    "clientComponentLoadTimes",
                    #2,
                ),
            ),
            StrictEqual,
            Constant(
                Num(
                    ConstantNumber(
                        0.0,
                    ),
                ),
            ),
        ),
        kind: Ternary {
            then: EffectsBlock {
                effects: [
                    FreeVar {
                        var: FreeVar(
                            "undefined",
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    2,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDecl,
                            ),
                            ExportDecl(
                                Decl,
                            ),
                            Decl(
                                Fn,
                            ),
                            FnDecl(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Decl,
                            ),
                            Decl(
                                Var,
                            ),
                            VarDecl(
                                Decls(
                                    0,
                                ),
                            ),
                            VarDeclarator(
                                Init,
                            ),
                            Expr(
                                Cond,
                            ),
                            CondExpr(
                                Cons,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: 535..544,
                        in_try: false,
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                2,
                            ),
                        ),
                        ModuleItem(
                            ModuleDecl,
                        ),
                        ModuleDecl(
                            ExportDecl,
                        ),
                        ExportDecl(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Var,
                        ),
                        VarDecl(
                            Decls(
                                0,
                            ),
                        ),
                        VarDeclarator(
                            Init,
                        ),
                        Expr(
                            Cond,
                        ),
                        CondExpr(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                2,
                            ),
                        ),
                        ModuleItem(
                            ModuleDecl,
                        ),
                        ModuleDecl(
                            ExportDecl,
                        ),
                        ExportDecl(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Var,
                        ),
                        VarDecl(
                            Decls(
                                0,
                            ),
                        ),
                        VarDeclarator(
                            Init,
                        ),
                        Expr(
                            Cond,
                        ),
                        CondExpr(
                            Alt,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    2,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Cond,
            ),
            CondExpr(
                Test,
            ),
        ],
        span: 496..600,
        in_try: false,
    },
    Member {
        obj: Variable(
            (
                "options",
                #7,
            ),
        ),
        prop: Constant(
            Str(
                Atom(
                    "reset",
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    2,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
            Expr(
                Member,
            ),
        ],
        span: 608..621,
        in_try: false,
    },
    Unreachable {
        start_ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    2,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDecl,
            ),
            ExportDecl(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                Return,
            ),
        ],
    },
]
