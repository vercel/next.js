error[E0277]: the trait bound `Vc<i32>: OperationValue` is not satisfied
 --> tests/derive_operation_value/fail_contains_vc_and_resolved_vc.rs:7:8
  |
7 |     a: Vc<i32>,
  |        ^^^^^^^ the trait `OperationValue` is not implemented for `Vc<i32>`
  |
  = help: the following other types implement trait `OperationValue`:
            &T
            &mut T
            ()
            (A, Z, Y, X, W, V, U, T)
            (B, A, Z, Y, X, W, V, U, T)
            (C, B, A, Z, Y, X, W, V, U, T)
            (D, C, B, A, Z, Y, X, W, V, U, T)
            (E, D, C, B, A, Z, Y, X, W, V, U, T)
          and $N others
note: required by a bound in `DeriveOperationValueAssertion::assert_impl_OperationValue`
 --> tests/derive_operation_value/fail_contains_vc_and_resolved_vc.rs:5:10
  |
5 | #[derive(OperationValue)]
  |          ^^^^^^^^^^^^^^ required by this bound in `DeriveOperationValueAssertion::assert_impl_OperationValue`
  = note: this error originates in the derive macro `OperationValue` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ResolvedVc<i32>: OperationValue` is not satisfied
 --> tests/derive_operation_value/fail_contains_vc_and_resolved_vc.rs:8:8
  |
8 |     b: ResolvedVc<i32>,
  |        ^^^^^^^^^^^^^^^ the trait `OperationValue` is not implemented for `ResolvedVc<i32>`
  |
  = help: the following other types implement trait `OperationValue`:
            &T
            &mut T
            ()
            (A, Z, Y, X, W, V, U, T)
            (B, A, Z, Y, X, W, V, U, T)
            (C, B, A, Z, Y, X, W, V, U, T)
            (D, C, B, A, Z, Y, X, W, V, U, T)
            (E, D, C, B, A, Z, Y, X, W, V, U, T)
          and $N others
note: required by a bound in `DeriveOperationValueAssertion::assert_impl_OperationValue`
 --> tests/derive_operation_value/fail_contains_vc_and_resolved_vc.rs:5:10
  |
5 | #[derive(OperationValue)]
  |          ^^^^^^^^^^^^^^ required by this bound in `DeriveOperationValueAssertion::assert_impl_OperationValue`
  = note: this error originates in the derive macro `OperationValue` (in Nightly builds, run with -Z macro-backtrace for more info)
